<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BadFormatConversionErrorFormat1" xml:space="preserve">
    <value>A value not bound to option name is defined with a bad format.</value>
  </data>
  <data name="BadFormatConversionErrorFormat2" xml:space="preserve">
    <value>Option '{0}' is defined with a bad format.</value>
  </data>
  <data name="BadFormatTokenErrorFormat" xml:space="preserve">
    <value>Token '{0}' is not recognized.</value>
  </data>
  <data name="BadVerbSelectedErrorFormat" xml:space="preserve">
    <value>Verb '{0}' is not recognized.</value>
  </data>
  <data name="CreateEFSDirectory" xml:space="preserve">
    <value>Create EFS directory</value>
  </data>
  <data name="CriticalErrorFormat" xml:space="preserve">
    <value>Critical error. {0}</value>
  </data>
  <data name="DirectoryPath" xml:space="preserve">
    <value>Directory path</value>
  </data>
  <data name="DisplayMoreInformationOnASpecificCommand" xml:space="preserve">
    <value>Display more information on a specific command.</value>
  </data>
  <data name="DisplayThisHelpScreen" xml:space="preserve">
    <value>Display this help screen.</value>
  </data>
  <data name="DisplayVersionInformation" xml:space="preserve">
    <value>Display version information.</value>
  </data>
  <data name="DontCreateAllParentDirectories" xml:space="preserve">
    <value>Don't create all parent directories</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>ERROR(S)</value>
  </data>
  <data name="HdlcInvalidResponseCrcFormat" xml:space="preserve">
    <value>Invalid Response CRC Expected: {0:X} - Received: {1:X}</value>
  </data>
  <data name="MissingRequiredOptionErrorFormat1" xml:space="preserve">
    <value>A required value not bound to option name is missing.</value>
  </data>
  <data name="MissingRequiredOptionErrorFormat2" xml:space="preserve">
    <value>Option '{0}' is defined with a bad format.</value>
  </data>
  <data name="MissingValueOptionErrorFormat" xml:space="preserve">
    <value>Option '{0}' has no value.</value>
  </data>
  <data name="NoVerbSelectedErrorFormat" xml:space="preserve">
    <value>No verb selected.</value>
  </data>
  <data name="PressEnterToExit" xml:space="preserve">
    <value>Press ENTER to exit</value>
  </data>
  <data name="QcdmApplyingModemConfig" xml:space="preserve">
    <value>Applying modem config...</value>
  </data>
  <data name="QcdmCantOpenEfsDirectoryFormat" xml:space="preserve">
    <value>Can't open EFS directory '{0}'. {1}</value>
  </data>
  <data name="QcdmCantOpenEfsFileFormat" xml:space="preserve">
    <value>Can't open EFS file '{0}'. {1}</value>
  </data>
  <data name="QcdmCommandBadCmd" xml:space="preserve">
    <value>Bad command</value>
  </data>
  <data name="QcdmCommandBadLen" xml:space="preserve">
    <value>Bad lengths</value>
  </data>
  <data name="QcdmCommandBadMode" xml:space="preserve">
    <value>Bad mode</value>
  </data>
  <data name="QcdmCommandBadParm" xml:space="preserve">
    <value>Bad params</value>
  </data>
  <data name="QcdmCommandBadSpcMode" xml:space="preserve">
    <value>Bad SPC mode</value>
  </data>
  <data name="QcdmDownloadingNvItems" xml:space="preserve">
    <value>Downloading NV items ...</value>
  </data>
  <data name="QcdmEfsErrorsBadFileNumber" xml:space="preserve">
    <value>Bad file number</value>
  </data>
  <data name="QcdmEfsErrorsDefaultFormat" xml:space="preserve">
    <value>EFS error. Code = {0}</value>
  </data>
  <data name="QcdmEfsErrorsDirectoryNotEmpty" xml:space="preserve">
    <value>Directory not empty</value>
  </data>
  <data name="QcdmEfsErrorsDirEntNotFound" xml:space="preserve">
    <value>Directory entry not found</value>
  </data>
  <data name="QcdmEfsErrorsDirNotOpen" xml:space="preserve">
    <value>Directory not open</value>
  </data>
  <data name="QcdmEfsErrorsFileExist" xml:space="preserve">
    <value>File exists</value>
  </data>
  <data name="QcdmEfsErrorsInconsistentState" xml:space="preserve">
    <value>Inconsistent state</value>
  </data>
  <data name="QcdmEfsErrorsInvalidDirEntry" xml:space="preserve">
    <value>Invalid directory entry</value>
  </data>
  <data name="QcdmEfsErrorsInvalidPath" xml:space="preserve">
    <value>Invalid path</value>
  </data>
  <data name="QcdmEfsErrorsInvalidSequence" xml:space="preserve">
    <value>Invalid sequence</value>
  </data>
  <data name="QcdmEfsErrorsIoError" xml:space="preserve">
    <value>I/O error</value>
  </data>
  <data name="QcdmEfsErrorsNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="QcdmEfsErrorsNotDirectory" xml:space="preserve">
    <value>Not a directory</value>
  </data>
  <data name="QcdmEfsErrorsNotEntry" xml:space="preserve">
    <value>No such file or directory</value>
  </data>
  <data name="QcdmEfsErrorsNotNandFlash" xml:space="preserve">
    <value>Not nand flash</value>
  </data>
  <data name="QcdmEfsErrorsNotPermited" xml:space="preserve">
    <value>Operation not permitted</value>
  </data>
  <data name="QcdmEfsErrorsOutOfMemory" xml:space="preserve">
    <value>Out of memory</value>
  </data>
  <data name="QcdmEfsErrorsPathTooLong" xml:space="preserve">
    <value>Path too long</value>
  </data>
  <data name="QcdmEfsErrorsPermissionDenided" xml:space="preserve">
    <value>Permission denied</value>
  </data>
  <data name="QcdmEfsErrorsTooManyOpenDirs" xml:space="preserve">
    <value>Too many open directories</value>
  </data>
  <data name="QcdmEfsErrorsTooManyOpenFiles" xml:space="preserve">
    <value>Too many open files</value>
  </data>
  <data name="QcdmEfsErrorsUnavailableInfo" xml:space="preserve">
    <value>Unavailable info</value>
  </data>
  <data name="QcdmEfsErrorsUnknownFileType" xml:space="preserve">
    <value>Unknown file type</value>
  </data>
  <data name="QcdmErrorOnCreateDirectoryFormat" xml:space="preserve">
    <value>Error on create directory '{0}'. {1}</value>
  </data>
  <data name="QcdmErrorOnDeleteDirectoryFormat" xml:space="preserve">
    <value>Error on delete directory '{0}'. {1}</value>
  </data>
  <data name="QcdmErrorOnDeleteFileFormat" xml:space="preserve">
    <value>Error on delete file '{0}'. {1}</value>
  </data>
  <data name="QcdmErrorOnDownloadDirectoryFormat" xml:space="preserve">
    <value>Error on download directory '{0}'. {1}</value>
  </data>
  <data name="QcdmErrorOnDownloadFormat" xml:space="preserve">
    <value>Error on download file '{0}'. {1}</value>
  </data>
  <data name="QcdmErrorOnFixFileNamesFormat" xml:space="preserve">
    <value>Error on fix file names in '{0}'. {1}</value>
  </data>
  <data name="QcdmErrorOnOpenDirectoryFormat" xml:space="preserve">
    <value>Error on open directory '{0}'. {1}</value>
  </data>
  <data name="QcdmErrorOnUploadDirectoryFormat" xml:space="preserve">
    <value>Error on upload directory '{0}'. {1}</value>
  </data>
  <data name="QcdmErrorOnUploadFormat" xml:space="preserve">
    <value>Error on upload file '{0}'. {1}</value>
  </data>
  <data name="QcdmFixFileNameFormat" xml:space="preserve">
    <value>Fixed file name '{0}' to '{1}' in folder '{2}'</value>
  </data>
  <data name="QcdmGeneratingModemConfig" xml:space="preserve">
    <value>Getting modem config...</value>
  </data>
  <data name="QcdmInvalidLogMask" xml:space="preserve">
    <value>Invalid log mask</value>
  </data>
  <data name="QcdmInvalidPassword" xml:space="preserve">
    <value>Invalid password</value>
  </data>
  <data name="QcdmInvalidResponse" xml:space="preserve">
    <value>Invalid response</value>
  </data>
  <data name="QcdmInvalidResponseCommand" xml:space="preserve">
    <value>Invalid response command</value>
  </data>
  <data name="QcdmInvalidResponseLength" xml:space="preserve">
    <value>Invalid response length</value>
  </data>
  <data name="QcdmInvalidSpc" xml:space="preserve">
    <value>Invalid SPC</value>
  </data>
  <data name="QcdmListOfDirectoryFormat" xml:space="preserve">
    <value>Listing of directory '{0}':</value>
  </data>
  <data name="QcdmProcessingFormat" xml:space="preserve">
    <value>Processing '{0}' ...</value>
  </data>
  <data name="QcdmSerialPortIsNotOpen" xml:space="preserve">
    <value>Serial port is not open</value>
  </data>
  <data name="QcdmUnsupportedCommandResponseFormat" xml:space="preserve">
    <value>Unsupported command response ({0})</value>
  </data>
  <data name="QcdmUnsupportedSubsysCommandResponseFormat" xml:space="preserve">
    <value>Unsupported  subsystem command response ({0})</value>
  </data>
  <data name="QcdmUploadingNvItems" xml:space="preserve">
    <value>Uploading NV items ...</value>
  </data>
  <data name="RepeatedOptionErrorFormat" xml:space="preserve">
    <value>Option '{0}' is defined multiple times.</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="SequenceOutOfRangeErrorFormat1" xml:space="preserve">
    <value>A sequence value not bound to option name is defined with few items than required.</value>
  </data>
  <data name="SequenceOutOfRangeErrorFormat2" xml:space="preserve">
    <value>A sequence option '{0}' is defined with fewer or more items than required.</value>
  </data>
  <data name="UnknownOptionErrorFormat" xml:space="preserve">
    <value>Option '{0}' is unknown.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>USAGE</value>
  </data>
  <data name="QcdmManyLogLines" xml:space="preserve">
    <value>Many log lines. Please disable log.</value>
  </data>
  <data name="MbnExtractorInvalidFormatCantFindMagicString" xml:space="preserve">
    <value>Invalid MBN format. Can't find magic string 'MCFG'</value>
  </data>
  <data name="MbnExtractorInvalidFormatElfDataNotExist" xml:space="preserve">
    <value>Invalid MBN format. ELF segment with data not exist</value>
  </data>
  <data name="MbnExtractorInvalidFormatInvalidHeaderVersionId" xml:space="preserve">
    <value>Invalid MBN format. Invalid header version id</value>
  </data>
  <data name="MbnExtractorInvalidFormatInvalidHeaderVersionValue" xml:space="preserve">
    <value>Invalid MBN format. Invalid header version value</value>
  </data>
  <data name="MbnExtractorInvalidFormatInvalidInvalidFileHeaderMagic" xml:space="preserve">
    <value>Invalid MBN format. Invalid file header magic</value>
  </data>
  <data name="MbnExtractorInvalidFormatInvalidInvalidFileItemSize" xml:space="preserve">
    <value>Invalid MBN format. Invalid file item size</value>
  </data>
  <data name="MbnExtractorInvalidFormatInvalidInvalidFileSizeMagic" xml:space="preserve">
    <value>Invalid MBN format. Invalid file size magic</value>
  </data>
  <data name="MbnExtractorInvalidFormatInvalidInvalidNvItemSize" xml:space="preserve">
    <value>Invalid MBN format. Invalid NV item size</value>
  </data>
  <data name="MbnExtractorInvalidFormatInvalidTrailerMagic1" xml:space="preserve">
    <value>Invalid MBN format. Invalid trailer magic '0x0A'</value>
  </data>
  <data name="MbnExtractorInvalidFormatInvalidTrailerMagic2" xml:space="preserve">
    <value>Invalid MBN format. Invalid trailer magic '0xA1'</value>
  </data>
  <data name="MbnExtractorInvalidFormatInvalidTrailerMagicValue" xml:space="preserve">
    <value>Invalid MBN format. Invalid trailer magic 'MCFG_TRL'</value>
  </data>
  <data name="MbnExtractorInvalidFormatInvalidTrailerSize" xml:space="preserve">
    <value>Invalid MBN format. Invalid trailer size</value>
  </data>
  <data name="MbnExtractorInvalidFormatUnknownItemType" xml:space="preserve">
    <value>Invalid MBN format. Unknown item type</value>
  </data>
  <data name="QcdmUseComPortFormat" xml:space="preserve">
    <value>Use serial port '{0}'</value>
  </data>
  <data name="QcdmExtractingMbnFileFormat" xml:space="preserve">
    <value>Extracting MBN file '{0}' ...</value>
  </data>
  <data name="QcdmErrorOnSetEventMask" xml:space="preserve">
    <value>Error on set event mask</value>
  </data>
  <data name="QcdmLogSubcribingLogNotSupportedErrorFormat" xml:space="preserve">
    <value>Log '{0}' not supported</value>
  </data>
  <data name="QcdmLogSubcribingMessageNotSupportedErrorFormat" xml:space="preserve">
    <value>Message '{0}' not supported</value>
  </data>
  <data name="QcdmLogSubcribingToLogsFormat" xml:space="preserve">
    <value>Subcribing to logs: {0} ...</value>
  </data>
  <data name="QcdmLogSubcribingToLogsResultFormat" xml:space="preserve">
    <value>Successfully subscribed to the logs: {0}</value>
  </data>
  <data name="QcdmLogSubcribingToMessagesFormat" xml:space="preserve">
    <value>Subcribing to messages: {0} ...</value>
  </data>
  <data name="QcdmLogSubcribingToMessagesResultFormat" xml:space="preserve">
    <value>Successfully subscribed to the messages: {0}</value>
  </data>
  <data name="InvalidResponseCrc" xml:space="preserve">
    <value>Invalid Response CRC</value>
  </data>
  <data name="WebDavCopyFormat" xml:space="preserve">
    <value>Copy data from "{0}" to "{1}" ...</value>
  </data>
  <data name="WebDavCreateCollectionFormat" xml:space="preserve">
    <value>Creating directory "{0}" ...</value>
  </data>
  <data name="WebDavCreateItemFormat" xml:space="preserve">
    <value>Creating file "{0}" ...</value>
  </data>
  <data name="WebDavDeleteItemFormat" xml:space="preserve">
    <value>Deleting "{0}" ...</value>
  </data>
  <data name="WebDavErrorCalculationETagFormat" xml:space="preserve">
    <value>Error on calculation ETag. {0}</value>
  </data>
  <data name="WebDavErrorCopyStreamFormat" xml:space="preserve">
    <value>Error on copy file to "{0}". {1}</value>
  </data>
  <data name="WebDavErrorCreateCollectionFormat" xml:space="preserve">
    <value>Error create directory "{0}". {1}</value>
  </data>
  <data name="WebDavErrorCreateItemFormat" xml:space="preserve">
    <value>Error create file "{0}". {1}</value>
  </data>
  <data name="WebDavErrorDeleteItemFormat" xml:space="preserve">
    <value>Error on delete file "{0}". {1}</value>
  </data>
  <data name="WebDavErrorGetItemFormat" xml:space="preserve">
    <value>Error get file "{0}". {1}</value>
  </data>
  <data name="WebDavErrorGetItemsFormat" xml:space="preserve">
    <value>Error get files "{0}". {1}</value>
  </data>
  <data name="WebDavErrorGetReadableStreamFormat" xml:space="preserve">
    <value>Error on open file "{0}". {1}</value>
  </data>
  <data name="WebDavErrorMoveItemFormat" xml:space="preserve">
    <value>Error on move file "{0}". {1}</value>
  </data>
  <data name="WebDavErrorOnProcessCollectionRequestFormat" xml:space="preserve">
    <value>Error on process collection request "{0}". {1}</value>
  </data>
  <data name="WebDavErrorOnProcessItemRequestFormat" xml:space="preserve">
    <value>Error on process item request "{0}". {1}</value>
  </data>
  <data name="WebDavErrorUploadFromStreamFormat" xml:space="preserve">
    <value>Error on write file "{0}". {1}</value>
  </data>
  <data name="WebDavGetItemFormat" xml:space="preserve">
    <value>Getting "{0}" ...</value>
  </data>
  <data name="WebDavGetItemsFormat" xml:space="preserve">
    <value>Gettings items from "{0}" ...</value>
  </data>
  <data name="WebDavGetReadableStreamFormat" xml:space="preserve">
    <value>Getting "{0}" for read ...</value>
  </data>
  <data name="WebDavMoveItemFormat" xml:space="preserve">
    <value>Moving file "{0}" ...</value>
  </data>
  <data name="WebDavProcessingCollectionRequestFormat" xml:space="preserve">
    <value>Processing collection request {1} "{0}"...</value>
  </data>
  <data name="WebDavProcessingItemRequestFormat" xml:space="preserve">
    <value>Processing item request {1} "{0}"...</value>
  </data>
  <data name="WebDavServerStartedFormat" xml:space="preserve">
    <value>WebDAV server is available at "{0}"</value>
  </data>
  <data name="WebDavUploadFromStreamFormat" xml:space="preserve">
    <value>Writing to "{0}" ...</value>
  </data>
  <data name="WebDavWarningPathNotFoundFormat" xml:space="preserve">
    <value>Path "{0}" not found</value>
  </data>
</root>